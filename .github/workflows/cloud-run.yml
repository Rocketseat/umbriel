# This workflow will build a docker container, publish it to Google Container Registry, and deploy it.
name: Build and Deploy

on:
  push:
    tags:
    - '*'

# Environment variables available to all jobs and steps in this workflow
env:
  GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
  GCP_EMAIL: ${{ secrets.GCP_EMAIL }}
  IMAGE: umbriel
  REGISTRY_HOSTNAME: us.gcr.io

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2
    
    # Set tag
    - name: Set tag
      run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF:10}

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '278.0.0'
        service_account_email: ${{ secrets.GCP_EMAIL }}
        service_account_key: ${{ secrets.GCP_KEY }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker
      
    # Build the Docker image
    - name: Build
      run: |        
        docker build -t "$REGISTRY_HOSTNAME"/"$GCP_PROJECT"/"$IMAGE":latest \
          -t "$REGISTRY_HOSTNAME"/"$GCP_PROJECT"/"$IMAGE":"$RELEASE_VERSION" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: docker push "$REGISTRY_HOSTNAME"/"$GCP_PROJECT"/"$IMAGE"

    # Since we are using watchtower we can skip this step.
    # Deploy the Docker image to the Cloud Run
    # - name: Deploy
      # run: gcloud run deploy umbriel --image "$REGISTRY_HOSTNAME"/"$GCP_PROJECT"/"$IMAGE":"$RELEASE_VERSION" --project "$GCP_PROJECT" --region us-east1 --allow-unauthenticated --platform managed
